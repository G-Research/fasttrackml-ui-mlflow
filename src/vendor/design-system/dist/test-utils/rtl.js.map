{"version":3,"file":"rtl.js","sources":["../../src/test-utils/rtl/selectEvent.ts","../../src/test-utils/rtl/table.ts","../../src/test-utils/rtl/index.ts"],"sourcesContent":["import { waitFor, screen } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\n\nimport { selectClasses } from '../common';\n\n/**\n * Opens the dropdown menu for the <Select/> by clicking. Will throw an error if\n * the menu is already opened or if the menu is unable to be opened.\n */\nexport async function openMenu(select: HTMLElement): Promise<void> {\n  if (select.classList.contains(selectClasses.open)) {\n    throw new Error(`Select is already open\\n${select.innerHTML}`);\n  }\n  const selector = select.querySelector(`.${selectClasses.selector}`);\n  if (!selector) {\n    throw new Error(`Selector not found\\n${select.innerHTML}`);\n  }\n  await userEvent.click(selector, { pointerEventsCheck: 0 });\n  await waitFor(() => {\n    if (!select.classList.contains(selectClasses.open)) {\n      throw new Error(`Select did not open\\n${select.innerHTML}`);\n    }\n  });\n}\n\n/**\n * Closes the dropdown menu for the <Select/> by clicking. Will throw an error if\n * the menu is already closed or if the menu is unable to be closed.\n */\nexport async function closeMenu(select: HTMLElement): Promise<void> {\n  if (!select.classList.contains(selectClasses.open)) {\n    throw new Error(`Select is already closed\\n${select.innerHTML}`);\n  }\n  const selector = select.querySelector(`.${selectClasses.selector}`);\n  if (!selector) {\n    throw new Error(`Selector not found\\n${select.innerHTML}`);\n  }\n  await userEvent.click(selector, { pointerEventsCheck: 0 });\n  await waitFor(() => {\n    if (select.classList.contains(selectClasses.open)) {\n      throw new Error(`Select did not close\\n${select.innerHTML}`);\n    }\n  });\n}\n\n/**\n * Returns a string concatenating the labels for all selected options.\n */\nexport function getLabelText(select: HTMLElement): string {\n  const selector = select.querySelector(`.${selectClasses.selector}`);\n  if (!selector) {\n    throw new Error(`Selector not found\\n${select.innerHTML}`);\n  }\n  // Trim the text to avoid weird whitespace issues non-label elements being added.\n  // For example, the input mirror is an empty span with some whitespace that is\n  // nested under the selector but does not show up in the label text.\n  return selector.textContent?.trim() ?? '';\n}\n\n/**\n * Selects options from the dropdown menu for a <Select/> component with `mode=\"multiple\"`.\n * The provided strings must match the option labels exactly. There is a known\n * limitation for lists that are extremely long because AntD virtualizes the\n * options so not all may options may be rendered in the DOM. If this is causing\n * you issues, please let #help-frontend know.\n */\nexport async function multiSelect(select: HTMLElement, options: string[]): Promise<void> {\n  await openMenu(select);\n  for (let i = 0; i < options.length; i++) {\n    const option = options[i];\n    const optionItem = screen.getByTitle(option);\n    await userEvent.click(optionItem, { pointerEventsCheck: 0 });\n  }\n  // Close the menu to indicate that selection has finished\n  await closeMenu(select);\n}\n\n/**\n * Selects options from the dropdown menu for a <Select/> component without a\n * mode. The provided string must match an option label exactly. There is a known\n * limitation for lists that are extremely long because AntD virtualizes the\n * options so not all may options may be rendered in the DOM. If this is causing\n * you issues, please let #help-frontend know.\n */\nexport async function singleSelect(select: HTMLElement, option: string): Promise<void> {\n  await openMenu(select);\n  const optionElem = screen.getByTitle(option);\n  await userEvent.click(optionElem, { pointerEventsCheck: 0 });\n  // Menu automatically closes for a single <Select/> (no mode=\"multiple\")\n}\n\n/**\n * Clicks on the \"Clear\" button. In order for this function to work properly,\n * the `allowClear` prop must be set to `true`.\n */\nexport async function clearAll(select: HTMLElement): Promise<void> {\n  const clearBtn = select.querySelector(`.${selectClasses.clear}`);\n  if (!clearBtn) {\n    throw new Error(`Select not clearable\\n${select.innerHTML}`);\n  }\n  await userEvent.click(clearBtn);\n}\n\n/**\n * Opens the dropdown menu, finds all of the options in the dropdown, closes\n * the menu, and returns a list of the text of each option in order.\n */\nexport async function getAllOptions(select: HTMLElement): Promise<string[]> {\n  await openMenu(select);\n  const optionsList = select.ownerDocument.body.querySelector(`.${selectClasses.list}`);\n  if (optionsList === null) {\n    throw new Error(`Options list not found\\n${select.ownerDocument.body.innerHTML}`);\n  }\n  const options: string[] = [];\n  optionsList.querySelectorAll(`.${selectClasses.option}`).forEach((option) => {\n    if (option.textContent === null) {\n      throw new Error(`Option had no text content\\n${option.innerHTML}`);\n    }\n    options.push(option.textContent);\n  });\n  await closeMenu(select);\n  return options;\n}\n","import { queryHelpers, within } from '@testing-library/react';\n\nimport type { GetTableRowByCellTextOptions, TableRows } from '../common';\nimport { createMarkdownTable } from '../common';\n\n/**\n * Returns the table row that contains the specified `cellText`. The `cellText`\n * must be in the column with name `columnHeaderName` if it is specified. Otherwise,\n * the `cellText` must be in the first column. Throws an error if either multiple\n * rows or no rows can be found that match the given options. Also throws an error\n * if the column with name `columnHeaderName` cannot be found.\n *\n * @param tableElement The HTMLElement representing the table to query in. This is likely\n * a `<div role=\"table\">` element, so it can be queried by `screen.getByRole('table')`.\n * @param cellText The cell text that uniquely identifies the row.\n * @param columnHeaderName The name of the column to search the text for. If not provided,\n * the first column will be used.\n */\nexport function getTableRowByCellText(\n  tableElement: HTMLElement,\n  cellText: string,\n  { columnHeaderName }: GetTableRowByCellTextOptions = {}\n): HTMLElement {\n  let columnHeaderIndex: number;\n  if (columnHeaderName === undefined) {\n    columnHeaderIndex = 0;\n  } else {\n    const columnHeader = within(tableElement).getByRole('columnheader', { name: columnHeaderName });\n    columnHeaderIndex = Array.from(columnHeader.parentElement?.children ?? []).indexOf(columnHeader);\n  }\n\n  const matchingRows = within(tableElement)\n    .getAllByRole('row')\n    // Skip first row (table header)\n    .slice(1)\n    .filter((row) => {\n      const cells = within(row).getAllByRole('cell');\n      const cell = cells[columnHeaderIndex];\n      const cellContainsText = within(cell).queryByText(cellText) !== null;\n      return cellContainsText;\n    });\n\n  if (matchingRows.length === 0) {\n    throw queryHelpers.getElementError(\n      `Unable to find a table row with text \"${cellText}\" in the column \"${columnHeaderName}\"`,\n      tableElement\n    );\n  }\n\n  if (matchingRows.length > 1) {\n    throw queryHelpers.getElementError(\n      `Found multiple table rows with text \"${cellText}\" in the column \"${columnHeaderName}\"`,\n      tableElement\n    );\n  }\n\n  return matchingRows[0];\n}\n\n/**\n * Converts a Du Bois table to a markdown table string. This means that each cell\n * is separated by a pipe (including the edges), the header row is on its own line\n * at the top, each data row is on its own line below, and the header row is separated\n * by a row of dashes from the data rows. This is useful for checking table contents\n * in tests.\n *\n * @param tableElement The HTMLElement representing the table to query in. This is likely\n * a `<div role=\"table\">` element, so it can be queried by `screen.getByRole('table')`.\n *\n * @example\n * The HTML table:\n * ```jsx\n *   <Table>\n *     <TableRow isHeader>\n *       <TableHeader>Name</TableHeader>\n *       <TableHeader>Fruit</TableHeader>\n *     </TableRow>\n *     <TableRow>\n *       <TableCell>Alice</TableCell>\n *       <TableCell>Apple</TableCell>\n *     </TableRow>\n *     <TableRow>\n *       <TableCell>Brady</TableCell>\n *       <TableCell>Banana</TableCell>\n *     </TableRow>\n *   </Table>\n * ```\n *\n * The Markdown table:\n * ```md\n *   | Name | Fruit |\n *   | --- | --- |\n *   | Alice | Apple |\n *   | Brady | Banana |\n * ```\n */\nexport function toMarkdownTable(tableElement: HTMLElement): string {\n  const { bodyRows, headerRow } = getTableRows(tableElement);\n  const columns = within(headerRow)\n    .getAllByRole('columnheader')\n    .map((column) => column.textContent ?? '');\n  const rows = bodyRows.map((row) =>\n    within(row)\n      .getAllByRole('cell')\n      .map((cell) => cell.textContent ?? '')\n  );\n  return createMarkdownTable(columns, rows);\n}\n\n/**\n * Returns the header row and all body rows (non-header rows) in order. Assumes that the\n * `tableElement` has a single header row (as the first row) and the rest of the rows are\n * body rows.\n *\n * @param tableElement The HTMLElement representing the table to query in. This is likely\n * a `<div role=\"table\">` element, so it can be queried by `screen.getByRole('table')`.\n */\nexport function getTableRows(tableElement: HTMLElement): TableRows<HTMLElement> {\n  const [firstRow, ...restRows] = within(tableElement).getAllByRole('row');\n  return {\n    bodyRows: restRows,\n    headerRow: firstRow,\n  };\n}\n","import userEvent from '@testing-library/user-event';\n\nexport * as selectEvent from './selectEvent';\n\nexport * from './table';\n\n/**\n * Opens the dropdown menu by clicking on the dropdown button.\n *\n * @param dropdownButton - The Dropdown Trigger button that opens the menu when clicked.\n */\nexport const openDropdownMenu = async (dropdownButton: HTMLElement) => {\n  await userEvent.type(dropdownButton, '{arrowdown}');\n};\n"],"names":["openMenu","select","classList","contains","selectClasses","open","Error","innerHTML","selector","querySelector","userEvent","click","pointerEventsCheck","waitFor","closeMenu","getLabelText","_selector$textContent","_selector$textContent2","textContent","trim","multiSelect","options","i","length","option","optionItem","screen","getByTitle","singleSelect","optionElem","clearAll","clearBtn","clear","getAllOptions","optionsList","ownerDocument","body","list","querySelectorAll","forEach","push","getTableRowByCellText","tableElement","cellText","columnHeaderName","arguments","undefined","columnHeaderIndex","_columnHeader$parentE","_columnHeader$parentE2","columnHeader","within","getByRole","name","Array","from","parentElement","children","indexOf","matchingRows","getAllByRole","slice","filter","row","cells","cell","cellContainsText","queryByText","queryHelpers","getElementError","toMarkdownTable","bodyRows","headerRow","getTableRows","columns","map","column","_column$textContent","rows","_cell$textContent","createMarkdownTable","firstRow","restRows","openDropdownMenu","dropdownButton","type"],"mappings":"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"}